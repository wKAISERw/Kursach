# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'MainProgram.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.
import json
from PyQt5 import QtCore, QtGui, QtWidgets
from Serializer.Serializer import Serializer
from Classes.Refrigerator import Refrigerator
from Classes.Product import Product
from Classes.Dish import Dish
from Classes.base import Food
from Classes.Statistics import Statistics
from datetime import datetime, timedelta

class Ui_MainWindow(object):
    def __init__(self):
        self.refrigerator = Refrigerator()
        self.statistics = Statistics(self.refrigerator)
        self.products_model = QtGui.QStandardItemModel()
        self.check_expiring_products_timer = QtCore.QTimer()
        self.check_expiring_products_timer.timeout.connect(self.check_expiring_products)
        self.dishes_model = QtGui.QStandardItemModel()
        self.history = Statistics(self.refrigerator)
        self.check_expiring_products_timer.start(24 * 60 * 60 * 1000)  # Перевірка кожні 24 години

        self.selected_product_index = None
        self.selected_dish_index = None
        self.selected_item_for_edit = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1332, 726)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.listViewProducts = QtWidgets.QListView(self.centralwidget)
        self.listViewProducts.setGeometry(QtCore.QRect(40, 160, 581, 451))
        self.listViewProducts.setObjectName("listViewProducts")
        self.pushButtonAddItem = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonAddItem.setGeometry(QtCore.QRect(550, 20, 131, 41))
        self.pushButtonAddItem.setStyleSheet("font-size: 8pt;\n"
                                             "")
        self.pushButtonAddItem.setObjectName("pushButtonAddItem")
        self.pushButtonSave = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonSave.setGeometry(QtCore.QRect(250, 20, 131, 41))
        self.pushButtonSave.setObjectName("pushButtonSave")
        self.pushButtonLoad = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonLoad.setGeometry(QtCore.QRect(400, 20, 131, 41))
        self.pushButtonLoad.setObjectName("pushButtonLoad")
        self.pushButtonRemove = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonRemove.setGeometry(QtCore.QRect(700, 20, 131, 41))
        self.pushButtonRemove.setStyleSheet("font-size: 8pt;\n"
                                            "")
        self.pushButtonRemove.setObjectName("pushButtonRemove")
        self.pushButtonEdit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonEdit.setGeometry(QtCore.QRect(850, 20, 131, 41))
        self.pushButtonEdit.setObjectName("pushButtonEdit")

        self.listViewDish = QtWidgets.QListView(self.centralwidget)
        self.listViewDish.setGeometry(QtCore.QRect(660, 210, 621, 461))
        self.listViewDish.setObjectName("listViewDish")

        self.pushButtonShowStatistics = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonShowStatistics.setGeometry(QtCore.QRect(1000, 20, 161, 41))
        self.pushButtonShowStatistics.setObjectName("pushButtonShowStatistics")

        self.lineEditSearch = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEditSearch.setGeometry(QtCore.QRect(480, 90, 361, 41))
        self.lineEditSearch.setObjectName("lineEditSearch")
        self.lineEditSearch.setPlaceholderText("Введіть пошуковий запит")

        self.comboBoxSelectionForSearch = QtWidgets.QComboBox(self.centralwidget)
        self.comboBoxSelectionForSearch.setGeometry(QtCore.QRect(330, 90, 141, 41))
        self.comboBoxSelectionForSearch.setObjectName("comboBoxSelectionForSearch")
        self.comboBoxSelectionForSearch.addItem("Продукти")
        self.comboBoxSelectionForSearch.addItem("Страви")

        self.pushButtonSearch = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonSearch.setGeometry(QtCore.QRect(850, 90, 141, 41))
        self.pushButtonSearch.setStyleSheet("font-size: 16pt;")
        self.pushButtonSearch.setObjectName("pushButtonSearch")
        self.pushButtonSearch.setText("Пошук")

        self.labelStatistic = QtWidgets.QLabel(self.centralwidget)
        self.labelStatistic.setGeometry(QtCore.QRect(50, 500, 271, 331))
        self.labelStatistic.setStyleSheet("font-size: 12pt;")
        self.labelStatistic.setObjectName("labelStatistic")

        self.labelStockProducts = QtWidgets.QLabel(self.centralwidget)
        self.labelStockProducts.setGeometry(QtCore.QRect(380, 480, 271, 371))
        self.labelStockProducts.setStyleSheet("font-size: 12pt;")
        self.labelStockProducts.setObjectName("labelStockProducts")

        self.pushButtonExpiringProducts = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonExpiringProducts.setGeometry(QtCore.QRect(1100, 20, 171, 41))
        self.pushButtonExpiringProducts.setObjectName("pushButtonExpiringProducts")
        self.pushButtonExpiringProducts.setText("Expiring Products")




        self.retranslateUi(MainWindow)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        # Стилізація для віджетів додавання, редагування
        self.pushButtonAddItem.setStyleSheet("""
            QPushButton {
                font-size: 12pt; background-color: #4CAF50; color: white; border: 2px solid #4CAF50;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #45a049; /* Колір при наведенні курсора */}
        """)
        self.pushButtonSave.setStyleSheet("""
            QPushButton {
                font-size: 12pt;background-color: #008CBA;color: white; border: 2px solid #008CBA;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #007399; /* Колір при наведенні курсора */
            }
        """)
        # Стилізація інших кнопок з ефектом "hover"
        self.pushButtonLoad.setStyleSheet("""
            QPushButton {
                font-size: 12pt; background-color: #f44336;color: white;border: 2px solid #f44336;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #d32f2f; /* Колір при наведенні курсора */
            }
        """)
        self.pushButtonRemove.setStyleSheet("""
            QPushButton {
                font-size: 12pt;background-color: #FF9800;color: white; border: 2px solid #FF9800;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e68a00; /* Колір при наведенні курсора */
            }
        """)
        self.pushButtonEdit.setStyleSheet("""
            QPushButton {
                font-size: 12pt;background-color: #795548;color: white;border: 2px solid #795548;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5d4037; /* Колір при наведенні курсора */
            }
        """)
        self.pushButtonShowStatistics.setStyleSheet("""
            QPushButton {
                font-size: 12pt;background-color: #9C27B0; color: white;border: 2px solid #9C27B0;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #7b1fa2; /* Колір при наведенні курсора */
            }
        """)
        self.pushButtonSearch.setStyleSheet("""
            QPushButton {
                font-size: 12pt;background-color: #607D8B;color: white;border: 2px solid #607D8B;border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #455a64; /* Колір при наведенні курсора */
                color: white; /* Колір тексту при наведенні курсора */
            }
        """)

        self.lineEditSearch.setStyleSheet("font-size: 12pt; border: 2px solid #ccc; border-radius: 5px;")
        self.comboBoxSelectionForSearch.setStyleSheet("font-size: 12pt; border: 2px solid #ccc; border-radius: 5px;")

        self.listViewProducts.setStyleSheet(
            "font-size: 12pt; background-color: #f0f0f0; border: 2px solid #ccc; border-radius: 5px;")
        self.listViewDish.setStyleSheet(
            "font-size: 12pt; background-color: #f0f0f0; border: 2px solid #ccc; border-radius: 5px;")

        # Стилізація для форми
        MainWindow.setStyleSheet("background-color: #f0f0f0;")  # Задає колір фону для головного вікна
        self.centralwidget.setStyleSheet("background-color: #f0f0f0;")  # Задає колір фону для центрального віджета



        # Стилізація для тексту на формі
        self.labelStatistic.setStyleSheet("font-size: 14pt; color: #3366CC; background-color: rgba(255, 255, 255, 0);")
        self.labelStockProducts.setStyleSheet(
            "font-size: 14pt; color: #3366CC; background-color: rgba(255, 255, 255, 0);")

        self.pushButtonAddItem.clicked.connect(self.add_item)
        self.pushButtonSearch.clicked.connect(self.search_items)
        self.pushButtonEdit.clicked.connect(self.edit_product_or_dish)
        self.pushButtonRemove.clicked.connect(self.remove_item)
        self.pushButtonShowStatistics.clicked.connect(self.show_history)
        self.listViewProducts.clicked.connect(self.handle_product_selection)
        self.listViewDish.clicked.connect(self.handle_dish_selection)
        self.pushButtonSave.clicked.connect(self.save_data)
        self.pushButtonLoad.clicked.connect(self.load_data)
        self.pushButtonExpiringProducts.clicked.connect(self.show_expiring_products)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def handle_product_selection(self, index):
        if self.selected_product_index == index.row():
            self.selected_product_index = None
            self.listViewProducts.clearSelection()
        else:
            self.selected_product_index = index.row()
            self.selected_dish_index = None
        print(f"Selected product index: {self.selected_product_index}")  # Додайте цей рядок для перевірки значення

    def handle_dish_selection(self, index):
        if self.selected_dish_index == index.row():
            self.selected_dish_index = None
            self.listViewDish.clearSelection()
        else:
            self.selected_product_index = None
            self.selected_dish_index = index.row()
        print(f"Selected dish index: {self.selected_dish_index}")  # Додайте цей рядок для перевірки значення

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButtonAddItem.setText(_translate("MainWindow", "Додати"))
        self.pushButtonSave.setText(_translate("MainWindow", "Зберегти"))
        self.pushButtonLoad.setText(_translate("MainWindow", "Завантажити"))
        self.pushButtonRemove.setText(_translate("MainWindow", "Видалити"))
        self.pushButtonEdit.setText(_translate("MainWindow", "Редагувати"))

        self.pushButtonShowStatistics.setText(_translate("MainWindow", "Переглянути статистику"))
        self.labelStatistic.setText(_translate("MainWindow", "TextLabel"))
        self.labelStockProducts.setText(_translate("MainWindow", "TextLabel"))
        self.pushButtonExpiringProducts.setText(_translate("MainWindow", "Expiring Products"))

    def show_expiring_products(self):
        expiring_products = self.statistics.get_expiring_products(days=7)
        if expiring_products:
            self.show_expiring_products_dialog(expiring_products)

    def show_expiring_products_dialog(self, expiring_products):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Expiring Products")
        layout = QtWidgets.QVBoxLayout()

        label = QtWidgets.QLabel("The following products will expire soon:")
        layout.addWidget(label)

        list_widget = QtWidgets.QListWidget()
        for product in expiring_products:
            list_widget.addItem(f"{product.name} - Expires on {product.expiration_date.strftime('%Y-%m-%d')}")

        layout.addWidget(list_widget)

        dialog.setLayout(layout)
        dialog.exec_()

    def check_expiring_products(self):
        # Метод для перевірки та відстеження продуктів, термін придатності яких закінчується
        expiring_products = self.statistics.get_expiring_products(days=1)  # Перевірка наступного дня
        if expiring_products:
            # Тут можна викликати певний метод або відобразити повідомлення користувачу
            print("Expiring products:", expiring_products)
    def add_item(self):
        item_type, ok = QtWidgets.QInputDialog.getItem(
            self.centralwidget, "Add Item", "Select item type:", ("Product", "Dish"), 0, False)
        if ok and item_type:
            if item_type == "Product":
                new_product = self.add_product()
                if new_product:
                    QtWidgets.QMessageBox.information(self.centralwidget, "Success",
                                                      f"Product '{new_product.name}' added successfully.")
                    self.last_action = f"Added product '{new_product.name}'"
            else:
                if self.refrigerator._foods and any(isinstance(food, Product) for food in self.refrigerator._foods):
                    new_dish = self.add_dish()
                    if new_dish:
                        QtWidgets.QMessageBox.information(self.centralwidget, "Success",
                                                          f"Dish '{new_dish.name}' added successfully.")
                        self.last_action = f"Added dish '{new_dish.name}'"
                else:
                    QtWidgets.QMessageBox.warning(
                        self.centralwidget, "Warning", "You need to add products before creating a dish.")

    def add_dish(self):
        dish_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Add Dish", "Enter dish name:")
        if ok and dish_name:
            ingredients = [food for food in self.refrigerator._foods if isinstance(food, Product)]
            if ingredients:
                ingredient_dialog = QtWidgets.QDialog()
                ingredient_dialog.setWindowTitle("Select Ingredients")
                ingredient_layout = QtWidgets.QVBoxLayout()

                ingredient_quantity_inputs = {}
                for ingredient in ingredients:
                    checkbox = QtWidgets.QCheckBox(ingredient.name)
                    ingredient_layout.addWidget(checkbox)

                    quantity_label = QtWidgets.QLabel("Quantity:")
                    quantity_input = QtWidgets.QSpinBox()
                    quantity_input.setMinimum(0)
                    quantity_input.setMaximum(ingredient.quantity)
                    ingredient_layout.addWidget(quantity_label)
                    ingredient_layout.addWidget(quantity_input)

                    ingredient_quantity_inputs[ingredient] = (checkbox, quantity_input)

                add_button = QtWidgets.QPushButton("Add Dish")
                add_button.clicked.connect(lambda: self.create_dish(dish_name, ingredient_quantity_inputs))
                ingredient_layout.addWidget(add_button)
                ingredient_dialog.setLayout(ingredient_layout)

                ingredient_dialog.exec_()
            else:
                QtWidgets.QMessageBox.warning(
                    self.centralwidget, "Warning", "You need to add products before creating a dish.")

    def create_dish(self, dish_name, ingredient_quantity_inputs):
        selected_ingredients = [(ingredient, quantity_input.value()) for ingredient, (checkbox, quantity_input) in
                                ingredient_quantity_inputs.items() if checkbox.isChecked()]
        if selected_ingredients:
            new_dish = Dish(dish_name)
            for ingredient, quantity in selected_ingredients:
                for _ in range(quantity):
                    new_dish.add_product(ingredient)
                    ingredient.quantity -= 1
                    ingredient.usage_count += 1  # Збільшуємо usage_count

            self.refrigerator.add_food(new_dish)
            self.update_dish_list()

            for ingredient, quantity in selected_ingredients:
                if ingredient.quantity < 0:
                    ingredient.quantity = 0
                    self.refrigerator.remove_food(ingredient)
            self.update_product_list()

            ingredients_info = ", ".join(
                [f"{ingredient.name} (x{quantity})" for ingredient, quantity in selected_ingredients])
            QtWidgets.QMessageBox.information(
                self.centralwidget, "Success",
                f"{dish_name} added to the refrigerator.\nIngredients: {ingredients_info}")
            self.statistics.add_action(f"Added dish '{new_dish.name}' with ingredients: {ingredients_info}")
        else:
            QtWidgets.QMessageBox.warning(
                self.centralwidget, "Warning", "You need to select at least one ingredient to create a dish.")

    def add_product(self):
        product_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Add Product", "Enter product name:")

        if ok and product_name:
            product_quantity, ok = QtWidgets.QInputDialog.getInt(
                self.centralwidget, "Add Product", "Enter quantity:", 1, 1, 1000, 1)
            if ok:
                product_expiration_date, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Add Product", "Enter expiration date (YYYY-MM-DD):")
                # Inside the add_product method
                if ok and product_expiration_date:
                    try:
                        expiration_date = datetime.strptime(product_expiration_date, "%Y-%m-%d").date()
                        if expiration_date < datetime.now().date():
                            QtWidgets.QMessageBox.warning(self.centralwidget, "Error",
                                                          "Product expiration date has already passed. Product cannot be added.")
                        else:
                            new_product = Product(product_name, product_quantity, expiration_date)
                            self.refrigerator.add_food(new_product)
                            self.update_product_list()
                            QtWidgets.QMessageBox.information(self.centralwidget, "Success",
                                                              f"{product_name} added to the refrigerator.")

                            # Create an instance of Statistics and use it to add the action
                            statistics = Statistics(self.refrigerator)
                            statistics.add_action(
                                f"Added product '{new_product.name}' with quantity {new_product.quantity} and expiration date {new_product.expiration_date.strftime('%Y-%m-%d')}")
                    except ValueError:
                        QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "Invalid expiration date format.")

    def add_selected_dish(self, dish_name, ingredient_quantity_inputs):
        selected_ingredients = []
        for ingredient, quantity_input in ingredient_quantity_inputs.items():
            if quantity_input.value() > 0:
                selected_ingredients.extend([(ingredient, quantity_input.value())])

        new_dish = Dish(dish_name)
        for ingredient, quantity in selected_ingredients:
            for _ in range(quantity):
                new_dish.add_ingredient(ingredient)

        self.refrigerator.add_food(new_dish)
        self.update_dish_list()

        ingredients_info = ", ".join(
            [f"{ingredient.name} (x{quantity})" for ingredient, quantity in selected_ingredients])
        QtWidgets.QMessageBox.information(
            self.centralwidget, "Success", f"{dish_name} added to the refrigerator.\nIngredients: {ingredients_info}")

        for ingredient, quantity in selected_ingredients:
            ingredient.quantity -= quantity
            if ingredient.quantity == 0:
                self.refrigerator.remove_food(ingredient)
        self.update_product_list()

    def edit_product_or_dish(self):
        if self.selected_product_index is not None:
            selected_product = self.refrigerator._foods[self.selected_product_index]
            if isinstance(selected_product, Product):
                self.edit_product(selected_product)
            else:
                QtWidgets.QMessageBox.warning(
                    self.centralwidget, "Error", "Selected item is not a product.")
        elif self.selected_dish_index is not None:
            selected_dish_item = self.dishes_model.item(self.selected_dish_index)
            if selected_dish_item is not None:
                selected_dish_name = selected_dish_item.text()
                selected_dish = next(
                    (food for food in self.refrigerator._foods if
                     isinstance(food, Dish) and food.name == selected_dish_name),
                    None)
                if selected_dish is not None:
                    self.edit_dish(selected_dish)
                else:
                    QtWidgets.QMessageBox.warning(
                        self.centralwidget, "Error", "Selected item is not a dish.")
            else:
                QtWidgets.QMessageBox.warning(
                    self.centralwidget, "Error", "Failed to retrieve the selected dish.")

    def edit_product(self, product):
        new_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Edit Product", "Enter new product name:", text=product.name)
        if ok and new_name:
            new_quantity, ok = QtWidgets.QInputDialog.getInt(
                self.centralwidget, "Edit Product", "Enter new quantity:", product.quantity, 1, 1000, 1)
            if ok:
                new_expiration_date, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Edit Product", "Enter new expiration date (YYYY-MM-DD):",
                    text=product.expiration_date.strftime('%Y-%m-%d'))
                if ok and new_expiration_date:
                    try:
                        new_expiration_date = datetime.strptime(new_expiration_date, "%Y-%m-%d").date()
                        if new_expiration_date < datetime.now().date():
                            QtWidgets.QMessageBox.warning(
                                self.centralwidget, "Error",
                                "Product expiration date has already passed. Product cannot be edited.")
                        else:
                            product.name = new_name
                            product.quantity = new_quantity
                            product.expiration_date = new_expiration_date
                            self.update_product_list()
                            QtWidgets.QMessageBox.information(
                                self.centralwidget, "Success", f"Product '{product.name}' edited successfully.")
                            self.statistics.add_action(
                                f"Edited product '{product.name}' with new quantity {product.quantity} and expiration date {product.expiration_date.strftime('%Y-%m-%d')}")
                    except ValueError:
                        QtWidgets.QMessageBox.warning(
                            self.centralwidget, "Error", "Invalid expiration date format.")

    def edit_dish(self, dish):
        # Show a dialog to edit the dish name
        new_dish_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Edit Dish", "Enter new dish name:", text=dish.name)
        if ok and new_dish_name:
            dish.name = new_dish_name  # Update the dish name

            # Create a dialog to select ingredients for editing
            edit_dialog = QtWidgets.QDialog()
            edit_dialog.setWindowTitle("Edit Dish Ingredients")
            edit_layout = QtWidgets.QVBoxLayout()

            ingredient_quantity_inputs = {}
            for ingredient in self.refrigerator._foods:
                if isinstance(ingredient, Product):
                    checkbox = QtWidgets.QCheckBox(ingredient.name)
                    if ingredient in dish.products:
                        checkbox.setChecked(True)
                    edit_layout.addWidget(checkbox)

                    quantity_label = QtWidgets.QLabel("Quantity:")
                    quantity_input = QtWidgets.QSpinBox()
                    quantity_input.setMinimum(0)  # Allow setting 0 quantity to remove the ingredient from the dish
                    quantity_input.setMaximum(ingredient.quantity)
                    if ingredient in dish.products:
                        quantity_input.setValue(dish.products.count(ingredient))
                    edit_layout.addWidget(quantity_label)
                    edit_layout.addWidget(quantity_input)

                    ingredient_quantity_inputs[ingredient] = (checkbox, quantity_input)

            save_button = QtWidgets.QPushButton("Save")
            save_button.clicked.connect(lambda: self.save_edited_dish(dish, new_dish_name, ingredient_quantity_inputs))
            edit_layout.addWidget(save_button)
            edit_dialog.setLayout(edit_layout)

            edit_dialog.exec_()

    def save_edited_dish(self, dish, new_dish_name, ingredient_quantity_inputs):
        updated_ingredients = []
        for ingredient, (checkbox, quantity_input) in ingredient_quantity_inputs.items():
            if checkbox.isChecked() and quantity_input.value() > 0:
                updated_ingredients.extend([(ingredient, quantity_input.value())])

        dish.name = new_dish_name  # Update the dish name

        # Remove existing products from the dish
        for product in list(dish.products):
            dish.remove_product(product)

        # Add updated ingredients to the dish
        for ingredient, quantity in updated_ingredients:
            for _ in range(quantity):
                dish.add_product(ingredient)

        # Update the quantity of products in the refrigerator
        for ingredient, quantity in updated_ingredients:
            if ingredient.quantity >= quantity:
                ingredient.quantity -= quantity
            else:
                QtWidgets.QMessageBox.warning(
                    self.centralwidget, "Error",
                    f"Insufficient quantity of {ingredient.name} in the refrigerator.")

        self.update_dish_list()
        self.update_product_list()  # Update the product list as well
        QtWidgets.QMessageBox.information(
            self.centralwidget, "Success", f"Dish '{dish.name}' updated successfully.")
        self.statistics.add_action(
            f"Edited dish '{dish.name}' with new ingredients: {', '.join([f'{ingredient.name} (x{quantity})' for ingredient, quantity in updated_ingredients])}")

    def remove_item(self):
        if self.selected_product_index is not None:
            selected_product = self.refrigerator._foods[self.selected_product_index]
            self.refrigerator.remove_food(selected_product)
            self.update_product_list()
            self.selected_product_index = None
            QtWidgets.QMessageBox.information(self.centralwidget, "Success",
                                              f"Product '{selected_product.name}' removed successfully.")
            self.statistics.add_action(
                f"Removed product '{selected_product.name}' with quantity {selected_product.quantity}")
        elif self.selected_dish_index is not None:
            selected_dish = self.refrigerator._foods[self.selected_dish_index]
            self.refrigerator.remove_food(selected_dish)
            self.update_dish_list()
            self.selected_dish_index = None
            QtWidgets.QMessageBox.information(self.centralwidget, "Success",
                                              f"Dish '{selected_dish.name}' removed successfully.")
            self.statistics.add_action(f"Removed dish '{selected_dish.name}'")

    def save_data(self):
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self.centralwidget, "Save Data", "", "JSON Files (*.json)")
        if filename:
            success = Serializer.save_data(self.refrigerator, filename)
            if success:
                QtWidgets.QMessageBox.information(self.centralwidget, "Success", "Data saved successfully.")
            else:
                QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "Error saving data.")

    def load_data(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Load Data", "", "JSON Files (*.json)")
        if filename:
            success = Serializer.load_data(self.refrigerator, filename)
            if success:
                self.update_product_list()
                self.update_dish_list()
                QtWidgets.QMessageBox.information(self.centralwidget, "Success", "Data loaded successfully.")
            else:
                QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "Error loading data.")

    def search_items(self):
        try:
            search_query = self.lineEditSearch.text().strip().lower()
            search_option = self.comboBoxSelectionForSearch.currentText()

            if search_option == "Продукти":
                self.products_model.clear()
                for food in self.refrigerator._foods:
                    if isinstance(food, Product) and search_query in food.name.lower():
                        expiration_date_str = food.expiration_date.strftime('%Y-%m-%d')
                        item = QtGui.QStandardItem(
                            f"{food.name} ({food.quantity}) - Термін придатності: {expiration_date_str}")
                        self.products_model.appendRow(item)
            else:
                self.dishes_model.clear()
                for food in self.refrigerator._foods:
                    if isinstance(food, Dish) and search_query in food.name.lower():
                        item = QtGui.QStandardItem(food.name)
                        self.dishes_model.appendRow(item)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self.centralwidget, "Помилка", f"Виникла помилка: {str(e)}")\


    def pushButtonShowStatistics_clicked(self):
        total_foods = len(self.refrigerator._foods)

        if total_foods == 0:
            # Холодильник порожній
            self.labelStatistic.setText("Холодильник порожній")
            self.labelStockProducts.clear()

        elif self.labelStatistic.text().strip() == "" and self.labelStockProducts.text().strip() == "":
            # Показати лейбли
            low_stock_products = self.statistics.analyze_low_stock()
            product_text = "Продукти з низьким запасом (≤ 5):\n"

            if not low_stock_products:
                product_text += "Усі продукти в достатній кількості"
            else:
                for product_str in low_stock_products:
                    product_text += f"- {product_str}\n"

            self.labelStockProducts.setText(product_text)

            total_foods, total_products, total_dishes = self.statistics.get_total_counts()
            statistic_text = f"Загальна к-сть їжі: {total_foods}\n"
            statistic_text += f"К-сть продуктів: {total_products}\n"
            statistic_text += f"К-сть страв: {total_dishes}"

            self.labelStatistic.setText(statistic_text)
        else:
            # Очистити лейбли
            self.labelStatistic.clear()
            self.labelStockProducts.clear()

    def update_product_list(self):
        self.products_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Product):
                expiration_date_str = food.expiration_date.strftime('%Y-%m-%d')
                item = QtGui.QStandardItem(f"{food.name} ({food.quantity}) - Expires on {expiration_date_str}")
                self.products_model.appendRow(item)
        self.listViewProducts.setModel(self.products_model)  # Update the ListView

    def update_dish_list(self):
        self.dishes_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Dish):
                dish_item = QtGui.QStandardItem(food.name)
                ingredients_info = ", ".join(
                    [f"{ingredient.name} (x{food.products.count(ingredient)})" for ingredient in
                     set(food.products)])
                dish_item.setToolTip(f"Ingredients: {ingredients_info}")
                self.dishes_model.appendRow(dish_item)
        self.listViewDish.setModel(self.dishes_model)

    def show_history(self):
        history_dialog = QtWidgets.QDialog()
        history_dialog.setWindowTitle("Action History")
        layout = QtWidgets.QVBoxLayout()

        list_widget = QtWidgets.QListWidget()
        for action in self.statistics.get_actions():
            list_widget.addItem(action)

        layout.addWidget(list_widget)

        history_dialog.setLayout(layout)
        history_dialog.exec_()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())