# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'MainProgram.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.
import json
from PyQt5 import QtCore, QtGui, QtWidgets

from datetime import datetime
from collections import Counter
import pickle
class Serializer:
    @staticmethod
    def serialize_product(product):
        return {
            "name": product.name,
            "quantity": product.quantity,
            "expiration_date": product.expiration_date.isoformat()
        }

    @staticmethod
    def serialize_dish(dish):
        return {
            "name": dish.name,
            "ingredients": [ingredient.name for ingredient in dish._ingredients]
        }

    @staticmethod
    def deserialize_product(product_data):
        return Product(
            product_data["name"],
            product_data["quantity"],
            datetime.fromisoformat(product_data["expiration_date"])
        )

    @staticmethod
    def deserialize_dish(dish_data, refrigerator):
        dish = Dish(dish_data["name"])
        for ingredient_name in dish_data["ingredients"]:
            ingredient = next((food for food in refrigerator._foods if isinstance(food, Product) and food.name == ingredient_name), None)
            if ingredient:
                dish.add_ingredient(ingredient)
        return dish

    @staticmethod
    def save_data(refrigerator, filename):
        data = {
            "products": [Serializer.serialize_product(product) for product in refrigerator._foods if isinstance(product, Product)],
            "dishes": [Serializer.serialize_dish(dish) for dish in refrigerator._foods if isinstance(dish, Dish)]
        }
        try:
            with open(filename, "w") as file:
                json.dump(data, file, indent=4)
            return True
        except Exception as e:
            print(f"Error saving data: {str(e)}")
            return False

    @staticmethod
    def load_data(refrigerator, filename):
        try:
            with open(filename, "r") as file:
                data = json.load(file)
            refrigerator._foods.clear()
            for product_data in data.get("products", []):
                product = Serializer.deserialize_product(product_data)
                refrigerator.add_food(product)
            for dish_data in data.get("dishes", []):
                dish = Serializer.deserialize_dish(dish_data, refrigerator)
                refrigerator.add_food(dish)
            return True
        except Exception as e:
            print(f"Error loading data: {str(e)}")
            return False
class Food:
    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name

class Product(Food):
    def __init__(self, name, quantity, expiration_date):
        super().__init__(name)
        self._quantity = quantity
        self._expiration_date = expiration_date

    @property
    def quantity(self):
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        self._quantity = value

    @property
    def expiration_date(self):
        return self._expiration_date

    def check_expiration(self):
        return self._expiration_date > datetime.now()

    def is_expired(self):
        return self._expiration_date < datetime.now().date()

class Dish(Food):
    def __init__(self, name):
        super().__init__(name)
        self._ingredients = []

    def add_ingredient(self, ingredient):
        self._ingredients.append(ingredient)

    def remove_ingredient(self, ingredient):
        self._ingredients.remove(ingredient)

class Refrigerator:
    def __init__(self):
        self._foods = []

    def add_food(self, food):
        self._foods.append(food)

    def remove_food(self, food):
        self._foods.remove(food)

class Statistics:
    def __init__(self, refrigerator):
        self._refrigerator = refrigerator

    def analyze_foods(self):
        product_counts = Counter(food.name for food in self._refrigerator._foods if isinstance(food, Product))
        low_stock_products = [name for name, count in product_counts.items() if count <= 3]
        expired_foods = [food for food in self._refrigerator._foods if isinstance(food, Product) and not food.check_expiration()]
        return len(self._refrigerator._foods), len([food for food in self._refrigerator._foods if isinstance(food, Dish)]), low_stock_products, expired_foods

    def recommend_purchases(self):
        total_foods, total_dishes, low_stock_products, expired_foods = self.analyze_foods()
        recommendations = []
        recommendations.append(f"Total Foods: {total_foods}")
        recommendations.append(f"Total Dishes: {total_dishes}")
        if low_stock_products:
            recommendations.append("You should buy more of the following products:")
            for product_name in low_stock_products:
                recommendations.append(f"- {product_name}")
        if expired_foods:
            recommendations.append("The following products have expired or are about to expire:")
            for product in expired_foods:
                recommendations.append(f"- {product.name} (Expiration date: {product.expiration_date.strftime('%Y-%m-%d')})")
        return recommendations
class StatisticsDialog(QtWidgets.QDialog):
    def __init__(self, refrigerator, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Статистика")
        self.setModal(True)

        layout = QtWidgets.QVBoxLayout()

        statistics = Statistics(refrigerator)
        total_foods, total_dishes, low_stock_products, expired_foods = statistics.analyze_foods()

        info_text = f"Всього продуктів: {total_foods}\n"
        info_text += f"Всього страв: {total_dishes}\n\n"

        if low_stock_products:
            info_text += "Необхідно поповнити запаси таких продуктів:\n"
            for product_name in low_stock_products:
                info_text += f"- {product_name}\n"
            info_text += "\n"

        if expired_foods:
            info_text += "Такі продукти прострочені або закінчується термін придатності:\n"
            for product in expired_foods:
                info_text += f"- {product.name} (Термін придатності: {product.expiration_date.strftime('%Y-%m-%d')})\n"

        info_label = QtWidgets.QLabel(info_text)
        info_label.setWordWrap(True)
        layout.addWidget(info_label)

        close_button = QtWidgets.QPushButton("Закрити")
        close_button.clicked.connect(self.accept)
        layout.addWidget(close_button)

        self.setLayout(layout)

class Ui_MainWindow(object):
    def __init__(self):
        self.refrigerator = Refrigerator()
        self.statistics = Statistics(self.refrigerator)
        self.products_model = QtGui.QStandardItemModel()
        self.dishes_model = QtGui.QStandardItemModel()
        self.selected_product_index = None
        self.selected_dish_index = None

    def setupUi(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1332, 726)
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.listViewProducts = QtWidgets.QListView(self.centralwidget)
            self.listViewProducts.setGeometry(QtCore.QRect(40, 160, 581, 451))
            self.listViewProducts.setObjectName("listViewProducts")
            self.pushButtonAddItem = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonAddItem.setGeometry(QtCore.QRect(550, 20, 131, 41))
            self.pushButtonAddItem.setStyleSheet("font-size: 8pt;\n"
                                                 "")
            self.pushButtonAddItem.setObjectName("pushButtonAddItem")
            self.pushButtonSave = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonSave.setGeometry(QtCore.QRect(250, 20, 131, 41))
            self.pushButtonSave.setObjectName("pushButtonSave")
            self.pushButtonLoad = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonLoad.setGeometry(QtCore.QRect(400, 20, 131, 41))
            self.pushButtonLoad.setObjectName("pushButtonLoad")
            self.pushButtonRemove = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonRemove.setGeometry(QtCore.QRect(700, 20, 131, 41))
            self.pushButtonRemove.setStyleSheet("font-size: 8pt;\n"
                                                "")
            self.pushButtonRemove.setObjectName("pushButtonRemove")
            self.pushButtonEdit = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonEdit.setGeometry(QtCore.QRect(850, 20, 131, 41))
            self.pushButtonEdit.setObjectName("pushButtonEdit")
            self.labelStatisticCountFood = QtWidgets.QLabel(self.centralwidget)
            self.labelStatisticCountFood.setGeometry(QtCore.QRect(60, 630, 171, 61))
            self.labelStatisticCountFood.setStyleSheet("font-size: 12pt;\n"
                                                       "")
            self.labelStatisticCountFood.setObjectName("labelStatisticCountFood")
            self.listViewDish = QtWidgets.QListView(self.centralwidget)
            self.listViewDish.setGeometry(QtCore.QRect(660, 210, 621, 461))
            self.listViewDish.setObjectName("listViewDish")

            self.pushButtonShowStatistics = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonShowStatistics.setGeometry(QtCore.QRect(1000, 20, 161, 41))
            self.pushButtonShowStatistics.setObjectName("pushButtonShowStatistics")

            self.labelCheckAmountOfProducts = QtWidgets.QLabel(self.centralwidget)
            self.labelCheckAmountOfProducts.setGeometry(QtCore.QRect(440, 650, 111, 16))
            self.labelCheckAmountOfProducts.setStyleSheet("font-size: 12pt")
            self.labelCheckAmountOfProducts.setObjectName("labelCheckAmountOfProducts")

            self.lineEditSearch = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEditSearch.setGeometry(QtCore.QRect(480, 90, 361, 41))
            self.lineEditSearch.setObjectName("lineEditSearch")
            self.lineEditSearch.setPlaceholderText("Введіть пошуковий запит")

            self.comboBoxSelectionForSearch = QtWidgets.QComboBox(self.centralwidget)
            self.comboBoxSelectionForSearch.setGeometry(QtCore.QRect(330, 90, 141, 41))
            self.comboBoxSelectionForSearch.setObjectName("comboBoxSelectionForSearch")
            self.comboBoxSelectionForSearch.addItem("Продукти")
            self.comboBoxSelectionForSearch.addItem("Страви")

            self.pushButtonSearch = QtWidgets.QPushButton(self.centralwidget)
            self.pushButtonSearch.setGeometry(QtCore.QRect(850, 90, 141, 41))
            self.pushButtonSearch.setStyleSheet("font-size: 16pt;")
            self.pushButtonSearch.setObjectName("pushButtonSearch")
            self.pushButtonSearch.setText("Пошук")


            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")

            MainWindow.setStatusBar(self.statusbar)

            self.pushButtonAddItem.clicked.connect(self.add_item)
            self.pushButtonSearch.clicked.connect(self.search_items)
            self.pushButtonEdit.clicked.connect(self.edit_product_or_dish)
            self.pushButtonRemove.clicked.connect(self.remove_item)
            self.pushButtonShowStatistics.clicked.connect(self.show_statistics)
            self.listViewProducts.clicked.connect(self.handle_product_selection)
            self.listViewDish.clicked.connect(self.handle_dish_selection)
            self.pushButtonSave.clicked.connect(self.save_data)
            self.pushButtonLoad.clicked.connect(self.load_data)
            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def handle_product_selection(self, index):
        if self.selected_product_index == index.row():
            self.selected_product_index = None
            self.listViewProducts.clearSelection()
        else:
            self.selected_product_index = index.row()
            self.selected_dish_index = None

    def handle_dish_selection(self, index):
        if self.selected_dish_index == index.row():
            self.selected_dish_index = None
            self.listViewDish.clearSelection()
        else:
            self.selected_product_index = None
            self.selected_dish_index = index.row()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButtonAddItem.setText(_translate("MainWindow", "Додати"))
        self.pushButtonSave.setText(_translate("MainWindow", "Зберегти"))
        self.pushButtonLoad.setText(_translate("MainWindow", "Завантажити"))
        self.pushButtonRemove.setText(_translate("MainWindow", "Видалити"))
        self.pushButtonEdit.setText(_translate("MainWindow", "Редагувати"))
        self.labelStatisticCountFood.setText(_translate("MainWindow", "TextLabel"))
        self.pushButtonShowStatistics.setText(_translate("MainWindow", "Переглянути статистику"))
        self.labelCheckAmountOfProducts.setText(_translate("MainWindow", "TextLabel"))

    def add_item(self):
        item_type, ok = QtWidgets.QInputDialog.getItem(
            self.centralwidget, "Add Item", "Select item type:", ("Product", "Dish"), 0, False)
        if ok and item_type:
            if item_type == "Product":
                self.add_product()
            else:
                if self.refrigerator._foods and any(isinstance(food, Product) for food in self.refrigerator._foods):
                    self.add_dish()
                else:
                    QtWidgets.QMessageBox.warning(
                        self.centralwidget, "Warning", "You need to add products before creating a dish.")

    def add_dish(self):
        dish_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Add Dish", "Enter dish name:")
        if ok and dish_name:
            ingredients = [food for food in self.refrigerator._foods if isinstance(food, Product)]
            if ingredients:
                ingredient_dialog = QtWidgets.QDialog()
                ingredient_dialog.setWindowTitle("Select Ingredients")
                ingredient_layout = QtWidgets.QVBoxLayout()

                ingredient_quantity_inputs = {}
                for ingredient in ingredients:
                    checkbox = QtWidgets.QCheckBox(ingredient.name)
                    ingredient_layout.addWidget(checkbox)

                    quantity_label = QtWidgets.QLabel("Quantity:")
                    quantity_input = QtWidgets.QSpinBox()
                    quantity_input.setMinimum(1)
                    quantity_input.setMaximum(ingredient.quantity)
                    ingredient_layout.addWidget(quantity_label)
                    ingredient_layout.addWidget(quantity_input)

                    ingredient_quantity_inputs[ingredient] = (checkbox, quantity_input)

                add_button = QtWidgets.QPushButton("Add Dish")
                add_button.clicked.connect(lambda: self.create_dish(dish_name, ingredient_quantity_inputs))
                ingredient_layout.addWidget(add_button)
                ingredient_dialog.setLayout(ingredient_layout)

                ingredient_dialog.exec_()
            else:
                QtWidgets.QMessageBox.warning(
                    self.centralwidget, "Warning", "You need to add products before creating a dish.")

    def create_dish(self, dish_name, ingredient_quantity_inputs):
        selected_ingredients = [(ingredient, quantity_input.value()) for ingredient, (checkbox, quantity_input) in
                                ingredient_quantity_inputs.items() if checkbox.isChecked()]
        if selected_ingredients:
            new_dish = Dish(dish_name)
            for ingredient, quantity in selected_ingredients:
                for _ in range(quantity):
                    new_dish.add_ingredient(ingredient)

            self.refrigerator.add_food(new_dish)
            self.update_dish_list()

            for ingredient, quantity in selected_ingredients:
                ingredient.quantity -= quantity
                if ingredient.quantity == 0:
                    self.refrigerator.remove_food(ingredient)
            self.update_product_list()

            QtWidgets.QMessageBox.information(
                self.centralwidget, "Success", f"{dish_name} added to the refrigerator.")
        else:
            QtWidgets.QMessageBox.warning(
                self.centralwidget, "Warning", "You need to select at least one ingredient to create a dish.")

    def add_product(self):
        product_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Add Product", "Enter product name:")

        if ok and product_name:
            product_quantity, ok = QtWidgets.QInputDialog.getInt(
                self.centralwidget, "Додати продукт", "Введіть кількість:", 1, 1, 1000, 1)
            if ok:
                product_expiration_date, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Додати продукт", "Введіть дату закінчення терміну придатності (YYYY-MM-DD):")
                if ok and product_expiration_date:
                    try:
                        expiration_date = datetime.strptime(product_expiration_date, "%Y-%m-%d").date()
                        if expiration_date < datetime.now().date():
                            QtWidgets.QMessageBox.warning(
                                self.centralwidget, "Помилка",
                                "Термін придатності продукту вже закінчився. Продукт не може бути доданий.")
                        else:
                            new_product = Product(product_name, product_quantity, expiration_date)
                            self.refrigerator.add_food(new_product)
                            self.update_product_list()
                            QtWidgets.QMessageBox.information(
                                self.centralwidget, "Успіх", f"{product_name} додано до холодильника.")
                    except ValueError:
                        QtWidgets.QMessageBox.warning(
                            self.centralwidget, "Помилка", "Невірний формат дати закінчення терміну придатності.")


    def add_selected_dish(self, dish_name, ingredient_quantity_inputs):
        selected_ingredients = []
        for ingredient, quantity_input in ingredient_quantity_inputs.items():
            if quantity_input.value() > 0:
                selected_ingredients.extend([ingredient] * quantity_input.value())

        new_dish = Dish(dish_name)
        for ingredient in selected_ingredients:
            new_dish.add_ingredient(ingredient)

        self.refrigerator.add_food(new_dish)
        self.update_dish_list()

        for ingredient in selected_ingredients:
            ingredient.quantity -= 1
            if ingredient.quantity == 0:
                self.refrigerator.remove_food(ingredient)
        self.update_product_list()

        QtWidgets.QMessageBox.information(
            self.centralwidget, "Success", f"{dish_name} added to the refrigerator.")

    def edit_product_or_dish(self):
        selected_index = self.listViewProducts.currentIndex().row()
        if selected_index >= 0:
            selected_food = self.refrigerator._foods[selected_index]
            if isinstance(selected_food, Product):
                new_name, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Редагувати продукт", "Введіть нову назву продукту:")
                if ok and new_name:
                    new_quantity, ok = QtWidgets.QInputDialog.getInt(
                        self.centralwidget, "Редагувати продукт", "Введіть нову кількість:", 1, 1, 1000, 1)
                    if ok:
                        new_expiration_date, ok = QtWidgets.QInputDialog.getText(
                            self.centralwidget, "Редагувати продукт",
                            "Введіть нову дату закінчення терміну придатності (YYYY-MM-DD):")
                        if ok and new_expiration_date:
                            try:
                                new_expiration_date = datetime.strptime(new_expiration_date, "%Y-%m-%d").date()
                                if new_expiration_date < datetime.now().date():
                                    QtWidgets.QMessageBox.warning(
                                        self.centralwidget, "Помилка",
                                        "Термін придатності продукту вже закінчився. Продукт не може бути відредагований.")
                                else:
                                    selected_food._name = new_name
                                    selected_food._quantity = new_quantity
                                    selected_food._expiration_date = new_expiration_date
                                    self.update_product_list()
                                    QtWidgets.QMessageBox.information(
                                        self.centralwidget, "Успіх",
                                        f"Продукт '{selected_food.name}' успішно відредаговано.")
                            except ValueError:
                                QtWidgets.QMessageBox.warning(
                                    self.centralwidget, "Помилка",
                                    "Невірний формат дати закінчення терміну придатності.")
        # Решта коду для редагування страв
        else:
            selected_index = self.listViewDish.currentIndex().row()
            if selected_index >= 0:
                selected_dish = self.refrigerator._foods[selected_index]
                new_name, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Редагувати страву", "Введіть нову назву страви:")
                if ok and new_name:
                    new_ingredients = []
                    for food in self.refrigerator._foods:
                        if isinstance(food, Product):
                            new_ingredients.append(food)
                    ingredient_dialog = QtWidgets.QDialog()
                    ingredient_dialog.setWindowTitle("Оберіть нові інгредієнти")
                    ingredient_layout = QtWidgets.QVBoxLayout()
                    for ingredient in new_ingredients:
                        checkbox = QtWidgets.QCheckBox(ingredient.name)
                        ingredient_layout.addWidget(checkbox)
                    add_button = QtWidgets.QPushButton("Оновити страву")
                    add_button.clicked.connect(ingredient_dialog.accept)
                    ingredient_layout.addWidget(add_button)
                    ingredient_dialog.setLayout(ingredient_layout)
                    if ingredient_dialog.exec_():
                        selected_ingredients = [new_ingredients[i] for i in range(len(new_ingredients)) if
                                                ingredient_layout.itemAt(i).widget().isChecked()]
                        selected_dish._name = new_name
                        selected_dish._ingredients = selected_ingredients
                        self.update_dish_list()
                        QtWidgets.QMessageBox.information(
                            self.centralwidget, "Успіх", f"Страва '{selected_dish.name}' успішно відредагована.")

    def remove_item(self):
        if self.selected_product_index is not None:
            selected_product = self.refrigerator._foods[self.selected_product_index]
            self.refrigerator.remove_food(selected_product)
            self.update_product_list()
            self.selected_product_index = None
            QtWidgets.QMessageBox.information(
                self.centralwidget, "Успіх", f"Продукт '{selected_product.name}' успішно видалено.")
        elif self.selected_dish_index is not None:
            selected_dish = self.refrigerator._foods[self.selected_dish_index]
            self.refrigerator.remove_food(selected_dish)
            self.update_dish_list()
            self.selected_dish_index = None
            QtWidgets.QMessageBox.information(
                self.centralwidget, "Успіх", f"Страва '{selected_dish.name}' успішно видалена.")

    def save_data(self):
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self.centralwidget, "Save Data", "", "JSON Files (*.json)")
        if filename:
            success = Serializer.save_data(self.refrigerator, filename)
            if success:
                QtWidgets.QMessageBox.information(self.centralwidget, "Success", "Data saved successfully.")
            else:
                QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "Error saving data.")

    def load_data(self):
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Load Data", "", "JSON Files (*.json)")
        if filename:
            success = Serializer.load_data(self.refrigerator, filename)
            if success:
                self.update_product_list()
                self.update_dish_list()
                QtWidgets.QMessageBox.information(self.centralwidget, "Success", "Data loaded successfully.")
            else:
                QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "Error loading data.")
    def show_statistics(self):
        total_foods, total_dishes, low_stock_products, expired_foods = self.statistics.analyze_foods()
        statistics_text = f"Total Foods: {total_foods}\n"
        statistics_text += f"Total Dishes: {total_dishes}\n\n"

        if low_stock_products:
            statistics_text += "You should buy more of the following products:\n"
            for product_name in low_stock_products:
                statistics_text += f"- {product_name}\n"
            statistics_text += "\n"

        if expired_foods:
            statistics_text += "The following products have expired or are about to expire:\n"
            for product in expired_foods:
                statistics_text += f"- {product.name} (Expiration date: {product.expiration_date.strftime('%Y-%m-%d')})\n"

        self.labelStatistic.setText(statistics_text)

    def search_items(self):
        try:
            search_query = self.lineEditSearch.text().strip().lower()
            search_option = self.comboBoxSelectionForSearch.currentText()

            if search_option == "Продукти":
                self.products_model.clear()
                for food in self.refrigerator._foods:
                    if isinstance(food, Product) and search_query in food.name.lower():
                        expiration_date_str = food.expiration_date.strftime('%Y-%m-%d')
                        item = QtGui.QStandardItem(
                            f"{food.name} ({food.quantity}) - Термін придатності: {expiration_date_str}")
                        self.products_model.appendRow(item)
            else:
                self.dishes_model.clear()
                for food in self.refrigerator._foods:
                    if isinstance(food, Dish) and search_query in food.name.lower():
                        item = QtGui.QStandardItem(food.name)
                        self.dishes_model.appendRow(item)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self.centralwidget, "Помилка", f"Виникла помилка: {str(e)}")

    def update_product_list(self):
        self.products_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Product):
                expiration_date_str = food.expiration_date.strftime('%Y-%m-%d')
                item = QtGui.QStandardItem(f"{food.name} ({food.quantity}) - Expires on {expiration_date_str}")
                self.products_model.appendRow(item)
        self.listViewProducts.setModel(self.products_model)  # Update the ListView

    def update_dish_list(self):
        self.dishes_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Dish):
                item = QtGui.QStandardItem(food.name)
                self.dishes_model.appendRow(item)
        self.listViewDish.setModel(self.dishes_model)  # Update the ListView

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())