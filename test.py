# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'MainProgram.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from collections import Counter

class Product:
    def __init__(self, name, quantity, expiration_date):
        self._name = name
        self._quantity = quantity
        self._expiration_date = expiration_date

    @property
    def name(self):
        return self._name

    @property
    def quantity(self):
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        self._quantity = value

    @property
    def expiration_date(self):
        return self._expiration_date

    def check_expiration(self):
        return self._expiration_date > datetime.now()

class Dish:
    def __init__(self, name, ingredients):
        self._name = name
        self._ingredients = ingredients

    @property
    def name(self):
        return self._name

    @property
    def ingredients(self):
        return self._ingredients

class Refrigerator:
    def __init__(self):
        self._foods = []

    def add_food(self, food):
        self._foods.append(food)

    def remove_food(self, food):
        self._foods.remove(food)

    def check_availability(self, food_name):
        for food in self._foods:
            if food.name == food_name:
                if isinstance(food, Product):
                    return food.quantity > 0
                else:
                    return True
        return False

class Statistics:
    def __init__(self, refrigerator):
        self._refrigerator = refrigerator

    def analyze_foods(self):
        product_counts = Counter(food.name for food in self._refrigerator._foods if isinstance(food, Product))
        low_stock_products = [name for name, count in product_counts.items() if count <= 3]
        expired_foods = [food for food in self._refrigerator._foods if not food.check_expiration()]
        return low_stock_products, expired_foods

    def recommend_purchases(self):
        low_stock_products, expired_foods = self.analyze_foods()
        recommendations = []
        if low_stock_products:
            recommendations.append("You should buy more of the following products:")
            for product_name in low_stock_products:
                recommendations.append(f"- {product_name}")
        if expired_foods:
            recommendations.append("The following products have expired or are about to expire:")
            for food in expired_foods:
                if isinstance(food, Product):
                    recommendations.append(f"- {food.name} (Expiration date: {food.expiration_date.strftime('%Y-%m-%d')})")
                else:
                    recommendations.append(f"- {food.name}")
        return recommendations

class Ui_MainWindow(object):
    def __init__(self):
        self.refrigerator = Refrigerator()
        self.statistics = Statistics(self.refrigerator)
        self.products_model = QtGui.QStandardItemModel()
        self.dishes_model = QtGui.QStandardItemModel()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1332, 726)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listViewProducts = QtWidgets.QListView(self.centralwidget)
        self.listViewProducts.setGeometry(QtCore.QRect(40, 70, 581, 441))
        self.listViewProducts.setObjectName("listViewProducts")
        self.listViewProducts.setModel(self.products_model)
        self.pushButtonAddProduct = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonAddProduct.setGeometry(QtCore.QRect(240, 520, 231, 51))
        self.pushButtonAddProduct.setStyleSheet("font-size: 16pt;\n"
                                               "")
        self.pushButtonAddProduct.setObjectName("pushButtonAddProduct")
        self.pushButtonAddProduct.clicked.connect(self.add_product)
        self.pushButtonSave = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonSave.setGeometry(QtCore.QRect(520, 10, 93, 28))
        self.pushButtonSave.setObjectName("pushButtonSave")
        self.pushButtonLoad = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonLoad.setGeometry(QtCore.QRect(620, 10, 93, 28))
        self.pushButtonLoad.setObjectName("pushButtonLoad")
        self.pushButtonAddDish = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonAddDish.setGeometry(QtCore.QRect(870, 160, 231, 51))
        self.pushButtonAddDish.setStyleSheet("font-size: 16pt;\n"
                                            "")
        self.pushButtonAddDish.setObjectName("pushButtonAddDish")
        self.pushButtonAddDish.clicked.connect(self.add_dish)
        self.pushButtonEdit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonEdit.setGeometry(QtCore.QRect(720, 10, 93, 28))
        self.pushButtonEdit.setObjectName("pushButtonEdit")
        self.labelStatistic = QtWidgets.QLabel(self.centralwidget)
        self.labelStatistic.setGeometry(QtCore.QRect(970, 70, 171, 61))
        self.labelStatistic.setObjectName("labelStatistic")
        self.listViewDish = QtWidgets.QListView(self.centralwidget)
        self.listViewDish.setGeometry(QtCore.QRect(690, 230, 621, 461))
        self.listViewDish.setObjectName("listViewDish")
        self.listViewDish.setModel(self.dishes_model)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButtonAddProduct.setText(_translate("MainWindow", "Додати продукт"))
        self.pushButtonSave.setText(_translate("MainWindow", "Зберегти"))
        self.pushButtonLoad.setText(_translate("MainWindow", "Завантажити"))
        self.pushButtonAddDish.setText(_translate("MainWindow", "Додати страву"))
        self.pushButtonEdit.setText(_translate("MainWindow", "Редагувати"))
        self.labelStatistic.setText(_translate("MainWindow", "TextLabel"))

    def add_product(self):
        product_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Додати продукт", "Введіть назву продукту:")
        if ok and product_name:
            product_quantity, ok = QtWidgets.QInputDialog.getInt(
                self.centralwidget, "Додати продукт", "Введіть кількість:", 1, 1, 1000, 1)
            if ok:
                product_expiration_date, ok = QtWidgets.QInputDialog.getText(
                    self.centralwidget, "Додати продукт", "Введіть дату закінчення терміну придатності (YYYY-MM-DD):")
                if ok and product_expiration_date:
                    try:
                        expiration_date = datetime.strptime(
                            product_expiration_date, "%Y-%m-%d")
                        new_product = Product(
                            product_name, product_quantity, expiration_date)
                        self.refrigerator.add_food(new_product)
                        self.update_product_list()
                        QtWidgets.QMessageBox.information(
                            self.centralwidget, "Успіх", f"{product_name} додано до холодильника.")
                    except ValueError:
                        QtWidgets.QMessageBox.warning(
                            self.centralwidget, "Помилка", "Невірний формат дати закінчення терміну придатності.")

    def add_dish(self):
        dish_name, ok = QtWidgets.QInputDialog.getText(
            self.centralwidget, "Додати страву", "Введіть назву страви:")
        if ok and dish_name:
            ingredients = []
            for food in self.refrigerator._foods:
                if isinstance(food, Product):
                    ingredients.append(food)
            ingredient_dialog = QtWidgets.QDialog()
            ingredient_dialog.setWindowTitle("Додати інгредієнти")
            ingredient_layout = QtWidgets.QVBoxLayout()
            for ingredient in ingredients:
                checkbox = QtWidgets.QCheckBox(ingredient.name)
                ingredient_layout.addWidget(checkbox)
            add_button = QtWidgets.QPushButton("Додати страву")
            add_button.clicked.connect(ingredient_dialog.accept)
            ingredient_layout.addWidget(add_button)
            ingredient_dialog.setLayout(ingredient_layout)
            if ingredient_dialog.exec_():
                selected_ingredients = [ingredients[i] for i in range(len(ingredients)) if ingredient_layout.itemAt(i).widget().isChecked()]
                new_dish = Dish(dish_name, selected_ingredients)
                self.refrigerator.add_food(new_dish)
                self.update_dish_list()
                for ingredient in selected_ingredients:
                    ingredient.quantity -= 1
                    if ingredient.quantity == 0:
                        self.refrigerator.remove_food(ingredient)
                self.update_product_list()
                QtWidgets.QMessageBox.information(
                    self.centralwidget, "Успіх", f"{dish_name} додано до холодильника.")

    def update_product_list(self):
        self.products_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Product):
                item = QtGui.QStandardItem(f"{food.name} ({food.quantity})")
                self.products_model.appendRow(item)

    def update_dish_list(self):
        self.dishes_model.clear()
        for food in self.refrigerator._foods:
            if isinstance(food, Dish):
                item = QtGui.QStandardItem(food.name)
                self.dishes_model.appendRow(item)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())